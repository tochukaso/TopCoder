import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class FixedDiceGameDiv2
{
	public double getExpectation(int a, int b)
	{
		double res = 0;
		
	    int sumCount = 0;
	    int sum = 0;
	    for (int i = b; i > 0; i --) {
	        if (a > i) {
	            int tmp = a - i;
	            sumCount += tmp;
	            for (int j = 0; j < tmp; j++) {
	                sum += a - j;
	            }
	        }
	    }
		
		
		return (double) sum /  sumCount;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, double p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		FixedDiceGameDiv2 obj;
		double answer;
		obj = new FixedDiceGameDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.getExpectation(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == answer && Math.abs(p2 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p2));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p2);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int p1;
		double p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 1000;
		p1 = 2;
		p2 = 2.0D;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 4;
		p1 = 2;
		p2 = 3.2D;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 3;
		p1 = 3;
		p2 = 2.6666666666666665D;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 11;
		p1 = 13;
		p2 = 7.999999999999999D;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// Alice and Bob are playing a game.
	// Alice has an a-sided die.
	// Bob has a b-sided die.
	// (The faces of an n-sided die have numbers 1 through n written on them.)
	// 
	// 
	// 
	// The game is simple:
	// Each player rolls their die, and the player who rolls a strictly larger number wins.
	// (It is possible that neither player wins.)
	// 
	// 
	// 
	// You are given the ints a and b.
	// The players already rolled their dice.
	// You do not know what numbers they rolled, but you know that Alice won the game.
	// Compute and return the expected value of the number Alice rolled.
	// 
	// 
	// 
	// DEFINITION
	// Class:FixedDiceGameDiv2
	// Method:getExpectation
	// Parameters:int, int
	// Returns:double
	// Method signature:double getExpectation(int a, int b)
	// 
	// 
	// NOTES
	// -Your return value must have absolute or relative error smaller than 1e-9.
	// -The expected value can be seen as the average of many experiments. In our case, suppose that you folow a lot of games, and each time Alice wins, you write down her score. As you watch more and more games, the average of all numbers you have written down will converge to the expected value you should return. 
	// 
	// 
	// CONSTRAINTS
	// -a and b will each be between 2 and 1000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 2
	// 2
	// 
	// Returns: 2.0
	// 
	// Alice can only win if she rolls a 2 and Bob rolls a 1. Thus, if we know Alice wins, we know she rolled a 2.
	// 
	// 1)
	// 4
	// 2
	// 
	// Returns: 3.2
	// 
	// 
	// 
	// 2)
	// 3
	// 3
	// 
	// Returns: 2.6666666666666665
	// 
	// 
	// 
	// 3)
	// 11
	// 13
	// 
	// Returns: 7.999999999999999
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
