import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class PairGameEasy
{
    final String ABLE = "Able to generate";
    final String NOT_ABLE = "Not able to generate";

    int c = 0;
    int d = 0;
    
    int index = 0;
    
	public String able(int a, int b, int c, int d)
	{
	    this.c = c;
	    this.d = d;

        if (dfs(a, b)) return ABLE;
	    
        return NOT_ABLE;
	}


	boolean dfs(int a, int b) {
	    if (a == c && b == d) {
	        return true;
	    } else if (a > c || b > d) {
	        return false;
	    }

	    boolean res = false;
	    if (dfs(a + b, b)) res = true;
        if (dfs(a, b)) res = true;
	    
        return res;
	}
	
	boolean solve (int x, int y) {
	    int xy = x + y;
	    if (xy == c && ( x == d || y == d)) {
	        return true;
	    }

       if (xy == d && ( x == c || y == c)) {
            return true;
        }
       
       return false;
	    
	}
	
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, boolean hasAnswer, String p4) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3);
		System.out.println("]");
		PairGameEasy obj;
		String answer;
		obj = new PairGameEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.able(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer.equals(p4);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + "\"" + p4 + "\"");
			}
			System.out.println("Your answer:");
			System.out.println("\t" + "\"" + answer + "\"");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int p1;
		int p2;
		int p3;
		String p4;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 1;
		p1 = 2;
		p2 = 3;
		p3 = 5;
		p4 = "Able to generate";
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 1;
		p1 = 2;
		p2 = 2;
		p3 = 1;
		p4 = "Not able to generate";
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 2;
		p1 = 2;
		p2 = 2;
		p3 = 999;
		p4 = "Not able to generate";
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 2;
		p1 = 2;
		p2 = 2;
		p3 = 1000;
		p4 = "Able to generate";
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 47;
		p1 = 58;
		p2 = 384;
		p3 = 221;
		p4 = "Able to generate";
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = 1000;
		p1 = 1000;
		p2 = 1000;
		p3 = 1000;
		p4 = "Able to generate";
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// You have an ordered pair of integers.
	// You can now make zero or more steps.
	// In each step, you can change your pair into a new pair of integers by adding one of them to the other.
	// That is, if your current pair is (x, y), then your next pair will be either (x+y, y), or (x, x+y).
	// 
	// 
	// 
	// For example, you can start with (1, 2), change it to (3, 2), change that to (3, 5), and then change that again to (3, 8).
	// 
	// 
	// 
	// You are given four ints: a, b, c, and d.
	// Return "Able to generate" (quotes for clarity) if it is possible to start with the pair (a, b) and end with the pair (c, d).
	// Otherwise, return "Not able to generate".
	// 
	// DEFINITION
	// Class:PairGameEasy
	// Method:able
	// Parameters:int, int, int, int
	// Returns:String
	// Method signature:String able(int a, int b, int c, int d)
	// 
	// 
	// CONSTRAINTS
	// -a will be between 1 and 1,000, inclusive.
	// -b will be between 1 and 1,000, inclusive.
	// -c will be between 1 and 1,000, inclusive.
	// -d will be between 1 and 1,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 1
	// 2
	// 3
	// 5
	// 
	// Returns: "Able to generate"
	// 
	// (1, 2) -> (3, 2) -> (3, 5).
	// 
	// 1)
	// 1
	// 2
	// 2
	// 1
	// 
	// Returns: "Not able to generate"
	// 
	// Note that order matters: (1, 2) and (2, 1) are two different pairs.
	// 
	// 2)
	// 2
	// 2
	// 2
	// 999
	// 
	// Returns: "Not able to generate"
	// 
	// 
	// 
	// 3)
	// 2
	// 2
	// 2
	// 1000
	// 
	// Returns: "Able to generate"
	// 
	// 
	// 
	// 4)
	// 47
	// 58
	// 384
	// 221
	// 
	// Returns: "Able to generate"
	// 
	// 
	// 
	// 5)
	// 1000
	// 1000
	// 1000
	// 1000
	// 
	// Returns: "Able to generate"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
