import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class AddMultiply
{
	public int[] makeExpression(int y)
	{

        int res[] = new int[3];

        for (int i = 1000; i >= -1000; i--) {
            if (i == 0 || i == 1) {
                continue;
            }
            
            int tmp = y - i;
            for (int j = 2; j < 10; j++) {
                for (int j2 = j; j2 < 100; j2++) {
                    if(tmp == j * j2) {
                        res[0] = j;
                        res[1] = j2;
                        res[2] = i;
                        return res;
                    }
                }
            }
        }
	    
	    return res;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, int[] p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		AddMultiply obj;
		int[] answer;
		obj = new AddMultiply();
		long startTime = System.currentTimeMillis();
		answer = obj.makeExpression(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p1[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.print("\t" + "{");
				for (int i = 0; p1.length > i; ++i) {
					if (i > 0) {
						System.out.print(",");
					}
					System.out.print(p1[i]);
				}
				System.out.println("}");
			}
			System.out.println("Your answer:");
			System.out.print("\t" + "{");
			for (int i = 0; answer.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(answer[i]);
			}
			System.out.println("}");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int[] p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 6;
		p1 = new int[]{2,2,2};
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 11;
		p1 = new int[]{2,3,5};
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 0;
		p1 = new int[]{7,10,-70};
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 500;
		p1 = new int[]{-400,-3,-700};
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 2;
		p1 = new int[]{2,2,-2};
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = 5;
		p1 = new int[]{5,2,-5};
		all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// You are given an int y.
	// We are looking for any int[] x that satisfies the following constraints:
	// 
	// x has exactly three elements
	// ( x[0] * x[1] ) + x[2] = y
	// Each x[i] must be between -1000 and 1000, inclusive.
	// No x[i] can be equal to 0 or 1.
	// 
	// Find and return one such x.
	// 
	// If there are multiple valid solutions, you may return any of them.
	// You may assume that for our constraints on y (specified below) at least one valid x always exists.
	// 
	// DEFINITION
	// Class:AddMultiply
	// Method:makeExpression
	// Parameters:int
	// Returns:int[]
	// Method signature:int[] makeExpression(int y)
	// 
	// 
	// CONSTRAINTS
	// -y will be between 0 and 500, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 6
	// 
	// Returns: {2, 2, 2 }
	// 
	// 2*2 + 2 = 6
	// 
	// Note that this is one of many possible solutions. Another solution is:
	// 
	// 3*3 + (-3) = 6
	// 
	// 
	// 1)
	// 11
	// 
	// Returns: {2, 3, 5 }
	// 
	// 
	// 
	// 2)
	// 0
	// 
	// Returns: {7, 10, -70 }
	// 
	// Note that 0 and 1 are not allowed, thus a result like 0 * 0 + 0 would be incorrect.
	// 
	// 3)
	// 500
	// 
	// Returns: {-400, -3, -700 }
	// 
	// Some or all of the returned numbers may be negative.
	// 
	// 4)
	// 2
	// 
	// Returns: {2, 2, -2 }
	// 
	// 
	// 
	// 5)
	// 5
	// 
	// Returns: {5, 2, -5 }
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
