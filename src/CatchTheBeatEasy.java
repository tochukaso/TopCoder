import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class CatchTheBeatEasy
{
	public String ableToCatchAll(int[] x, int[] y)
	{
	    String able = "Able to catch";
        String notAble = "Not able to catch";
        int now = 0;
        int before = 0;
        for (int i = 0 ; i < x.length; i++) {
            int target = Integer.MAX_VALUE;
            int targetIndex = 0;
            for (int j = 0; j < y.length; j++) {
                if (before < y[j]) {
                    if (target > y[j]) {
                        target = y[j];
                        targetIndex = j;
                    }
                }
            }
            int distance = 0;
            if (now > 0) {
                distance = Math.abs(now - x[targetIndex]);
            } else {
                distance = Math.abs(x[targetIndex] - now);
            }
            
            if (distance > target - before) {
                return notAble;
            }
            before = target;
            now = x[targetIndex];
        }
        
        return able;
	}
	
	static class Point {
	    int x, y;
	    
	    Point(int x, int y) {
	        this.x = x;
	        this.y = y;
	    }
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		CatchTheBeatEasy obj;
		String answer;
		obj = new CatchTheBeatEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.ableToCatchAll(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + "\"" + p2 + "\"");
			}
			System.out.println("Your answer:");
			System.out.println("\t" + "\"" + answer + "\"");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int[] p1;
		String p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{-1,1,0};
		p1 = new int[]{1,3,4};
		p2 = "Able to catch";
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{-3};
		p1 = new int[]{2};
		p2 = "Not able to catch";
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{-1,1,0};
		p1 = new int[]{1,2,4};
		p2 = "Not able to catch";
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{0,-1,1};
		p1 = new int[]{9,1,3};
		p2 = "Able to catch";
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{70,-108,52,-70,84,-29,66,-33};
		p1 = new int[]{141,299,402,280,28,363,427,232};
		p2 = "Not able to catch";
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = new int[]{-175,-28,-207,-29,-43,-183,-175,-112,-183,-31,-25,-66,-114,-116,-66};
		p1 = new int[]{320,107,379,72,126,445,318,255,445,62,52,184,247,245,185};
		p2 = "Able to catch";
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 6 -----
		disabled = false;
		p0 = new int[]{0,0,0,0};
		p1 = new int[]{0,0,0,0};
		p2 = "Able to catch";
		all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// One of the modes in the game "osu!" is called "catch the beat".
	// In this mode, you control a character that catches falling fruit.
	// 
	// 
	// 
	// The game is played in the vertical plane.
	// For simplicity, we will assume that both your character and all pieces of fruit are points in that plane.
	// 
	// 
	// 
	// You start the game at the coordinates (0, 0).
	// Your character can only move along the x-axis.
	// The maximum speed of your character is 1 unit of distance per second.
	// For example, you need at least 3 seconds to move from (-2, 0) to (1, 0).
	// 
	// 
	// 
	// You are given int[]s x and y that contain initial coordinates of the fruit you should catch:
	// for each valid i, there is one piece of fruit that starts at (x[i], y[i]).
	// All pieces of fruit fall down with constant speed of 1 unit of distance per second.
	// That is, a fruit currently located at (xf, yf) will move to (xf, yf-t) in t seconds.
	// 
	// 
	// 
	// You will catch a fruit if the character is located at the same point as the fruit at some moment in time.
	// Can you catch all the fruit in the game?
	// Return "Able to catch" (quotes for clarity) if you can, and "Not able to catch" otherwise.
	// 
	// DEFINITION
	// Class:CatchTheBeatEasy
	// Method:ableToCatchAll
	// Parameters:int[], int[]
	// Returns:String
	// Method signature:String ableToCatchAll(int[] x, int[] y)
	// 
	// 
	// CONSTRAINTS
	// -x will contain between 1 and 50 elements, inclusive.
	// -x and y will contain the same number of elements.
	// -The elements in x will be between -1,000 and 1,000, inclusive.
	// -The elements in y will be between 0 and 1,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {-1, 1, 0}
	// {1, 3, 4}
	// 
	// Returns: "Able to catch"
	// 
	// In order to catch all three pieces of fruit, you have to follow this schedule (always walking at 1 unit per second):
	// 
	// Walk left for 1 second. When you reach (-1,0), catch the fruit that started at (-1,1).
	// Walk right for 2 seconds. When you reach (1,0), catch the fruit that started at (1,3).
	// Walk left for 1 second. When you reach (0,0), catch the fruit that started at (0,4).
	// 
	// 
	// 1)
	// {-3}
	// {2}
	// 
	// Returns: "Not able to catch"
	// 
	// The only piece of fruit cannot be caught.
	// Even if you start moving left immediately, you will only reach (-2,0) by the time the fruit crosses the y axis.
	// 
	// 2)
	// {-1, 1, 0}
	// {1, 2, 4}
	// 
	// Returns: "Not able to catch"
	// 
	// 
	// 
	// 3)
	// {0, -1, 1}
	// {9, 1, 3}
	// 
	// Returns: "Able to catch"
	// 
	// You can catch the pieces of fruit in any order.
	// Also note that sometimes you'll want to move slower or wait at some location.
	// For example, after catching the pieces of fruit that started at (-1,1) and (1,3), you can walk to (0,0) and wait there for the third piece.
	// 
	// 4)
	// {70,-108,52,-70,84,-29,66,-33}
	// {141,299,402,280,28,363,427,232}
	// 
	// Returns: "Not able to catch"
	// 
	// 
	// 
	// 5)
	// {-175,-28,-207,-29,-43,-183,-175,-112,-183,-31,-25,-66,-114,-116,-66}
	// {320,107,379,72,126,445,318,255,445,62,52,184,247,245,185}
	// 
	// Returns: "Able to catch"
	// 
	// 
	// 
	// 6)
	// {0,0,0,0}
	// {0,0,0,0}
	// 
	// Returns: "Able to catch"
	// 
	// Different pieces of fruit may share the same position.
	// You can catch all the pieces at the same time.
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
