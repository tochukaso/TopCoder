import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class Subsets
{
	public int findSubset(int[] numbers)
	{
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		Subsets obj;
		int answer;
		obj = new Subsets();
		long startTime = System.currentTimeMillis();
		answer = obj.findSubset(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p1);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{1,1,1};
		p1 = 2;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{1,1,1,1,2,2,2,2};
		p1 = 13;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{1,2,3,4};
		p1 = 3;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{1,1,1,1,1,1,1,1,1,1,1,1,1,10,20,30,40,50};
		p1 = 77;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{1,1,1,1,1,1,1,1,1,1,1,2,3,4,2,2,2};
		p1 = 100;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = new int[]{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22};
		p1 = 8050;
		all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 6 -----
		disabled = false;
		p0 = new int[]{5,3};
		p1 = 0;
		all_right = (disabled || KawigiEdit_RunTest(6, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// You have a bag with some balls.
	// There is a positive integer written on each of the balls.
	// Balls with the same integer are identical.
	// 
	// A bag with balls is nice if the sum of numbers on all balls is strictly greater than the product of those numbers.
	// For example, if the numbers on balls are {1,1,2,3}, the bag is nice because 1+1+2+3 > 1*1*2*3.
	// 
	// You are given a int[] numbers.
	// Each element of numbers is a number written on one of the balls in your bag.
	// You are going to remove some (possibly none, but not all) balls from the bag.
	// After you do so, the bag must be nice.
	// 
	// Return the number of different nice bags you can obtain.
	// 
	// DEFINITION
	// Class:Subsets
	// Method:findSubset
	// Parameters:int[]
	// Returns:int
	// Method signature:int findSubset(int[] numbers)
	// 
	// 
	// NOTES
	// -You may assume that the return value always fits into a signed 32-bit integer variable.
	// 
	// 
	// CONSTRAINTS
	// -numbers will contain between 1 and 1000 elements, inclusive.
	// -Each element of numbers will be between 1 and 1000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1,1,1}
	// 
	// Returns: 2
	// 
	// The bag contains three identical balls, each with the number 1.
	// We can produce a nice bag in two ways:
	// 
	// Keep all three balls. The bag is nice because 1+1+1 > 1*1*1.
	// Throw away one ball. The bag is nice because 1+1 > 1*1.
	// 
	// 
	// 1)
	// {1,1,1,1,2,2,2,2}
	// 
	// Returns: 13
	// 
	// Our bag contains 8 balls: four with a 1 and four with a 2.
	// All possible nice bags that can be produced by removing some of these balls are listed below, one per row.
	// 
	// 1,1
	// 1,1,1
	// 1,1,1,1
	// 1,2
	// 1,1,2
	// 1,1,1,2
	// 1,1,1,1,2
	// 1,2,2
	// 1,1,2,2
	// 1,1,1,2,2
	// 1,1,1,1,2,2
	// 1,1,1,2,2,2
	// 1,1,1,1,2,2,2
	// 
	// 2)
	// {1,2,3,4}
	// 
	// Returns: 3
	// 
	// 
	// 
	// 3)
	// {1,1,1,1,1,1,1,1,1,1,1,1,1,10,20,30,40,50}
	// 
	// Returns: 77
	// 
	// 
	// 
	// 4)
	// {1,1,1,1,1,1,1,1,1,1,1,2,3,4,2,2,2}
	// 
	// Returns: 100
	// 
	// 
	// 
	// 5)
	// {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	//  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	//  1,1,1,1,1,1,2,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22}
	// 
	// Returns: 8050
	// 
	// 
	// 
	// 6)
	// {5,3}
	// 
	// Returns: 0
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
