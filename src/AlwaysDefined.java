import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class AlwaysDefined
{
    
    private static long gcd(long n1, long n2) {
        return (n2 == 0)?n1:gcd(n2, n1%n2);
    }

    int MOD ;
    
    Map<Long, Long> e(long l, long r) {
        Map<Long, Long> list = new HashMap<Long, Long>();
        
        for (long i = l; i * i <=r; i++) {
            if (r % i == 0) {
            }
        }
        return list;
    }
    
	public long countIntegers(long L, long R, int W)
	{
		MOD = W;
		long sum = 0;
		
		
		
		List<Long> list = new ArrayList<Long>();
		for (;L <= R; L++) {
		    /**
		    boolean isAns = false;
		    for (Long ans : list) {
		        
		    }
		    if (isAns) {
		        continue;
		    }
		    **/
		    long x = dfs(L);
		    while (x > 0) {
		        long next = dfs(x);
		        if (next == x) {
		            list.add(L);
		            sum++;
		            break;
		        }
		        x = next;
		    }
		    
		}
		
		return sum;
	}
	
	public long dfs(long x) {
	    if (x < 0) {
	        return -1;
	    }
	    long y = x % MOD;
	    if (y == 0) {
	        return -1;
	    }
	    return x / y;
	}
	
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, long p0, long p1, int p2, boolean hasAnswer, long p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
		System.out.println("]");
		AlwaysDefined obj;
		long answer;
		obj = new AlwaysDefined();
		long startTime = System.currentTimeMillis();
		answer = obj.countIntegers(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p3);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		long p0;
		long p1;
		int p2;
		long p3;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 10L;
		p1 = 10L;
		p2 = 4;
		p3 = 1L;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 1L;
		p1 = 99L;
		p2 = 2;
		p3 = 50L;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 1282L;
		p1 = 1410L;
		p2 = 10;
		p3 = 42L;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 29195807L;
		p1 = 273209804877L;
		p2 = 42;
		p3 = 31415926535L;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Given is a positive integer W.
	// We will use W to define a function f.
	// The value f(x) is computed as follows:
	// 
	// If x is not a positive integer, f(x) is undefined.
	// Let y = x modulo W. If y is zero, f(x) is undefined.
	// Otherwise, f(x) = x/y.
	// 
	// For any positive integer x, consider the following infinite sequence:
	// x, f(x), f(f(x)), f(f(f(x))), and so on.
	// We say that f is always defined for x if all the terms of the above sequence are defined.
	// (In other words, there is no positive integer k such that f^k(x) is undefined.
	// Here, f^k denotes f applied k times.)
	// 
	// You are given longs L and R, and the int W used in our function f.
	// Count all x between L and R, inclusive, such that f is always defined for x.
	// Return that count.
	// 
	// 
	// DEFINITION
	// Class:AlwaysDefined
	// Method:countIntegers
	// Parameters:long, long, int
	// Returns:long
	// Method signature:long countIntegers(long L, long R, int W)
	// 
	// 
	// CONSTRAINTS
	// -L will be between 1 and 10^18, inclusive.
	// -R will be between L and 10^18, inclusive.
	// -W will be between 2 and 3000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 10
	// 10
	// 4
	// 
	// Returns: 1
	// 
	// For W = 4, we have f(10) = 5, f(f(10)) = 5, f(f(f(10))) = 5 and so on, thus f is always defined for x = 10.
	// 
	// 1)
	// 1
	// 99
	// 2
	// 
	// Returns: 50
	// 
	// For W = 2, f is always defined for odd integers but not for even integers. There are 50 odd integers between 1 and 99, inclusive.
	// 
	// 2)
	// 1282
	// 1410
	// 10
	// 
	// Returns: 42
	// 
	// 
	// 
	// 3)
	// 29195807
	// 273209804877
	// 42
	// 
	// Returns: 31415926535
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
