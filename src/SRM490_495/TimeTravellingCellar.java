package SRM490_495;
import java.util.*; 
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TimeTravellingCellar
{
	public int determineProfit(int[] profit, int[] decay)
	{
	    int maxA ;
	    {
	    int maxP = 0;
	    int minD = Integer.MAX_VALUE;
	    int nextD = Integer.MAX_VALUE;
	    for (int i = 0; i <profit.length; i++) {
            if (maxP < profit[i]) {
    	        maxP = Math.max(maxP, profit[i]);
                minD = Math.min(minD, nextD);
                nextD = Math.min(nextD, decay[i]);
            } else {
    	        minD = Math.min(minD, decay[i]);
            }
	    }
	    
	    maxA = maxP - minD;
	    } 
	    int maxB ;
    {
        
        
            int maxP = 0;
            int nextP = 0;
            int minD = Integer.MAX_VALUE;
            for (int i =0; i <profit.length; i++){
                if (minD > decay[i]) {
                    minD = Math.min(minD, decay[i]);
                    maxP = Math.max(maxP, nextP);
                    nextP = Math.max(nextP, profit[i]);
                } else {
                    maxP = Math.max(maxP, profit[i]);
                }
            }
	    
            maxB = maxP - minD; 
	    } 
	    
	    return Math.max(maxB, maxA);
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		TimeTravellingCellar obj;
		int answer;
		obj = new TimeTravellingCellar();
		long startTime = System.currentTimeMillis();
		answer = obj.determineProfit(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p2);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{1,2,3};
		p1 = new int[]{3,1,2};
		p2 = 2;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{3,2};
		p1 = new int[]{1,2};
		p2 = 1;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{3,3,3};
		p1 = new int[]{1,1,1};
		p2 = 2;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{1000,500,250,125};
		p1 = new int[]{64,32,16,8};
		p2 = 992;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Gogo owns N wine cellars, numbered 0 through N-1. He possesses a time machine and will use it to advance time in one of the cellars, maturing all the wine inside. However, as a side effect, he must also choose one other cellar and turn back time there, making the wine inside younger.
	// 
	// 
	// You are given two int[]s, profit and decay. Advancing time in cellar i will gain Gogo a profit of profit[i]. Turning back time in cellar i will lose him decay[i] in profit. Return the maximum profit that Gogo can gain by advancing time in one cellar and turning time back in another cellar. It is guaranteed that this profit will be positive.
	// 
	// DEFINITION
	// Class:TimeTravellingCellar
	// Method:determineProfit
	// Parameters:int[], int[]
	// Returns:int
	// Method signature:int determineProfit(int[] profit, int[] decay)
	// 
	// 
	// CONSTRAINTS
	// -profit will contain between 2 and 50 elements, inclusive.
	// -Each element of profit will be between 1 and 10000, inclusive.
	// -decay will contain the same number of elements as profit.
	// -Each element of decay will be between 1 and 10000, inclusive.
	// -The maximum profit that Gogo can gain will be positive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1,2,3}
	// {3,1,2}
	// 
	// Returns: 2
	// 
	// Advance time in cellar 2 and turn back time in cellar 1. The total profit is 3 - 1 = 2.
	// 
	// 1)
	// {3,2}
	// {1,2}
	// 
	// Returns: 1
	// 
	// He can't advance and turn back time in the same cellar.
	// 
	// 2)
	// {3,3,3}
	// {1,1,1}
	// 
	// Returns: 2
	// 
	// 
	// 
	// 3)
	// {1000,500,250,125}
	// {64,32,16,8}
	// 
	// Returns: 992
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
