package SRM490_495;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class OneDigitDifference
{
	public int getSmallest(int N)
	{
	    if (N == 0) return 1;
	    if (N < 10) return 0;
	   
	    String s = String.valueOf(N).substring(1);
	    int x = Integer.parseInt(s) ;
	    
	    return x;
	    
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		OneDigitDifference obj;
		int answer;
		obj = new OneDigitDifference();
		long startTime = System.currentTimeMillis();
		answer = obj.getSmallest(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p1);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 9;
		p1 = 0;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 0;
		p1 = 1;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 900000123;
		p1 = 123;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 30000;
		p1 = 0;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 47;
		p1 = 7;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = 1907654321;
		p1 = 907654321;
		all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// We say that two integer numbers differ from each other by one digit, when in their decimal notation, possibly with leading zeros, they will differ in exactly one position. For example numbers 128 and 28 differ by one digit:
	// 	128
	// 	028 
	// But numbers 2047 and 40 differ by two digits:
	// 	2047
	// 	0040
	// 
	// Given the number N, find and return the smallest possible non-negative number M, such that number N and M differ from each other by exactly one digit.
	// 
	// DEFINITION
	// Class:OneDigitDifference
	// Method:getSmallest
	// Parameters:int
	// Returns:int
	// Method signature:int getSmallest(int N)
	// 
	// 
	// CONSTRAINTS
	// -N will be between 0 and 2,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 9
	// 
	// Returns: 0
	// 
	// 0 is the smallest non-negative number and differs by only one digit.
	// 
	// 1)
	// 0
	// 
	// Returns: 1
	// 
	// The result number is not always smaller than N.
	// 
	// 2)
	// 900000123
	// 
	// Returns: 123
	// 
	// Leading zeros in the result are okay:
	//  900000123
	//  000000123
	// 
	// 3)
	// 30000
	// 
	// Returns: 0
	// 
	// Leading zeros are okay also with 0 as a result:
	//  30000
	//  00000
	// 
	// 4)
	// 47
	// 
	// Returns: 7
	// 
	// 
	// 
	// 5)
	// 1907654321
	// 
	// Returns: 907654321
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
