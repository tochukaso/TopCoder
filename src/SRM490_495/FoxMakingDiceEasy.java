package SRM490_495;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class FoxMakingDiceEasy
{
	public int theCount(int N, int K)
	{
		int ret = 0;
		for (int s = K; s < 2*N; s++) {
            for (int i = 1; i < N; i++) {
                int pi = s - i;
                if (i >= pi || pi > N) continue;
                
                for (int j = i + 1; j <= N; j++) {
                    int pj = s - j;
                    if (j == pi || j >= pj || pj > N) continue;
                    for (int k = j + 1; k <= N; k++) {
                        int pk = s - k;
                        if (k == pi || k == pj || k >= pk || pk > N) continue;
                        System.out.println(i + " " + pi + " " + j + " " + pj + " " + k + " " + pk);
                        
                        ret += 2;
                    }
                }
            }
            
		}
	    return ret; 
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		FoxMakingDiceEasy obj;
		int answer;
		obj = new FoxMakingDiceEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.theCount(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p2);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 6;
		p1 = 7;
		p2 = 2;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 5;
		p1 = 7;
		p2 = 0;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 10;
		p1 = 1;
		p2 = 105800;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 31;
		p1 = 46;
		p2 = 504;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 10;
		p1 = 10;
		p2 = 48;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Fox Jiro likes dice. He wants to make his own dice. Each die he wants to make is a cube. Each of the 6 faces has an integer between 1 and N, inclusive. No two faces have same number. Also the following condition must be satisfied: for all faces, the sum of the numbers on opposite faces must be equal and the sum must be greater than or equal to K.
	// 
	// He realized that there are many ways to make such dice. He wants to know how many ways there are. Please help Jiro to make a program that is given two integers N and K and returns the number of different dice satisfying the condition mentioned above.
	// 
	// Two dice are considered the same if you can rotate one to form the other.
	// 
	// 
	// DEFINITION
	// Class:FoxMakingDiceEasy
	// Method:theCount
	// Parameters:int, int
	// Returns:int
	// Method signature:int theCount(int N, int K)
	// 
	// 
	// NOTES
	// -The answer will always fit in a signed 32-bit integer.
	// 
	// 
	// CONSTRAINTS
	// -N will be between 1 and 50, inclusive.
	// -K will be between 1 and 100, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 6
	// 7
	// 
	// Returns: 2
	// 
	// You can make normal dice. There are two ways to arrange the numbers.
	// 
	// 1)
	// 5
	// 7
	// 
	// Returns: 0
	// 
	// You cannot make 6 sided dice with 5 numbers.
	// 
	// 2)
	// 50
	// 1
	// 
	// Returns: 105800
	// 
	// 
	// 
	// 3)
	// 31
	// 46
	// 
	// Returns: 504
	// 
	// 
	// 
	// 4)
	// 10
	// 10
	// 
	// Returns: 48
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
