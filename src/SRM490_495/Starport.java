package SRM490_495;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class Starport
{
	public double getExpectedTime(int N, int M)
	{
	    return (N - gcd(N, M))/ 2.0;
	}

	long gcd(long n1, long n2) {
        return (n2 == 0)?n1:gcd(n2, n1%n2);
	}
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, double p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		Starport obj;
		double answer;
		obj = new Starport();
		long startTime = System.currentTimeMillis();
		answer = obj.getExpectedTime(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == answer && Math.abs(p2 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p2));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p2);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int p1;
		double p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 4;
		p1 = 2;
		p2 = 1.0D;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 5;
		p1 = 3;
		p2 = 2.0D;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 6;
		p1 = 1;
		p2 = 2.5D;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 12345;
		p1 = 2345;
		p2 = 6170.0D;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// A new starport has just started working. Starting from some moment of time (call it minute 0), a new spaceship arrives at the starport every M minutes. In other words, spaceships arrive at the starport at minutes 0, M, 2*M, 3*M and so on. 
	// 
	// Similarly, starting from minute 0 and repeating each N minutes, all arrived spaceships that are still placed at the port are teleported to the shed. If a spaceship arrives at the exact same minute when such a teleportation happens, it will be teleported immediately. Otherwise it will need to wait until the next teleportation happens.
	// 
	// Let the waiting time of a spaceship be the time between its arrival and its teleportation to the shed. Return the average waiting time of a spaceship in minutes. See notes for an exact definition.
	// 
	// 
	// DEFINITION
	// Class:Starport
	// Method:getExpectedTime
	// Parameters:int, int
	// Returns:double
	// Method signature:double getExpectedTime(int N, int M)
	// 
	// 
	// NOTES
	// -Let W(i) be the waiting time for the spaceship that arrives at minute M * i. The average waiting time can be defined as the limit of (W(0) + W(1) + ... + W(P - 1)) / P when P tends to positive infinity. This limit will always exist.
	// -The returned value must have an absolute or relative error less than 1e-9.
	// 
	// 
	// CONSTRAINTS
	// -N and M will each be between 1 and 1,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 4
	// 2
	// 
	// Returns: 1.0
	// 
	// Spaceships arrive at the starport at minutes 0, 2, 4, 6, 8, and so on. Teleportations are done at minutes 0, 4, 8, and so on. The waiting times for the spaceships are, correspondingly, 0, 2, 0, 2, 0, and so on, so the expected waiting time is 1.
	// 
	// 1)
	// 5
	// 3
	// 
	// Returns: 2.0
	// 
	// 
	// 
	// 2)
	// 6
	// 1
	// 
	// Returns: 2.5
	// 
	// 
	// 
	// 3)
	// 12345
	// 2345
	// 
	// Returns: 6170.0
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
