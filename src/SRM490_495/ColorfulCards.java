package SRM490_495;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;


public class ColorfulCards
{
    Set<Integer>[] set = null;
    String prime = null;
    int N = 0;
    int cardCnt = 0;
    String colors = null;
    int[] marked = null;
    
    /**
     * base文字列からwordを取りだす場合の組み合わせを返却する。
     * 例. base abcaabc word abc
     *     {0,1,2},{0,5,6},{3,5,6},{4,5,6}
     *     を返却する。
     * 
     * @param base
     * @param word
     * @return
     */
    public List<Integer[]> searchWord(String base, String word) {
        List<Integer[]> res = new ArrayList<Integer[]>();
        
        
        
        return res;
    }
    
	public int[] theCards(int N, String colors)
	{
	    prime = primeString();
	    this.N = N + 1;
	    this.colors = colors;
	    cardCnt = colors.length();
	    set = new HashSet[cardCnt];
	    for (int i = 0; i < cardCnt; i++) {
            set[i] = new HashSet<Integer>();
        }
	    
	    marked = new int[cardCnt];
	    System.out.println(prime);
	    dfs(1,0);
	    int[] res = new int[colors.length()];
	    
	    for (int i = 0; i < cardCnt; i++) {
	        if(set[i].size() > 1) {
	            res[i] = -1;
	        } else {
	            res[i] = set[i].iterator().next();
	        }
        }
        
//	    int resIndex = 0;
//	    int arrays = 0;
//	    for (int i = 1; i <= N; i++) {
//     	    int incremental = 1;
//	        for (int j = resIndex + 1; j < colors.length(); j++) {
//	            if(colors.charAt(j) != colors.charAt(resIndex)) {
//	                break;
//	            }
//                incremental++;
//            }
//	        arrays++;
//	        if(colors.charAt(resIndex) == prime.charAt(i)) {
//	            res[resIndex] = i;
//	            resIndex++;
//	        } else {
//	            
//	        }
//            
//            if (resIndex  >= colors.length()) {
//                
//                break;
//            }
//        }
	        
	    return res;
	            
		
	}
	
	public int getMax(Set<Integer> arg) {
	    if (arg.size() == 0) return 0;
	    int max = 0;
	    for (Integer integer : arg) {
            max = Math.min(integer, max) ;
        }
	    
	    return max;
	    
	}
	public void dfs(int index, int cardIndex) {
        if(cardIndex == cardCnt || getMax(set[cardIndex]) >= index) {
            for (int i = 0; i < cardIndex; i++) {
                if(marked[i] != 0) {
                    set[i].add(marked[i]);
                }
            }
            return;
        }
        if(index == N) return;

        if(colors.charAt(cardIndex) == prime.charAt(index)) {
            marked[cardIndex] = index;
            dfs(index + 1, cardIndex + 1);
            marked[cardIndex] = 0;
        }

        dfs(index + 1, cardIndex);
	}
	
	
	public String primeString() {
	    
	    StringBuilder sb = new StringBuilder();
	    
	    boolean[] isPrime = new boolean[1001];
	    isPrime[1] = true;
	            
        

	    for (int i = 2; i <= Math.sqrt(1000); i++) {
	        if(!isPrime[i]) {
	            for (int j = i + i; j <= 1000; j+=i) {
	                isPrime[j] = true;
                }
	        }
        }
	    
	    for (int i = 0; i <= 1000; i++) {
            sb.append(isPrime[i] ? 'B' : 'R');
        }
	    

	    return sb.toString();
	    
	}
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, String p1, boolean hasAnswer, int[] p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "\"" + p1 + "\"");
		System.out.println("]");
		ColorfulCards obj;
		int[] answer;
		obj = new ColorfulCards();
		long startTime = System.currentTimeMillis();
		answer = obj.theCards(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			if (answer.length != p2.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p2[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.print("\t" + "{");
				for (int i = 0; p2.length > i; ++i) {
					if (i > 0) {
						System.out.print(",");
					}
					System.out.print(p2[i]);
				}
				System.out.println("}");
			}
			System.out.println("Your answer:");
			System.out.print("\t" + "{");
			for (int i = 0; answer.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(answer[i]);
			}
			System.out.println("}");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		String p1;
		int[] p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 5;
		p1 = "RRR";
		p2 = new int[]{2,3,5};
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 7;
		p1 = "BBB";
		p2 = new int[]{1,4,6};
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 6;
		p1 = "RBR";
		p2 = new int[]{-1,4,5};
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 58;
		p1 = "RBRRBRBBRBRRBBRRBBBRRBBBRR";
		p2 = new int[]{-1,-1,-1,-1,-1,-1,-1,-1,17,18,19,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,47,53};
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 495;
		p1 = "RBRRBRBBRBRRBBRRBBBRRBBBRR";
		p2 = new int[]{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Rabbit Hanako has N cards numbered 1 through N. Each card's number is written on its front side. The back side of each card is colored red if the number is prime, and blue if it is not prime.
	// 
	// 
	// Cat Taro has chosen a subset of these cards and arranged them face down in a row. The cards are sorted in increasing order from left to right. He wants Hanako to guess the numbers written on the cards. Hanako can only see the colored back side of each card. You are given a String colors, where the i-th character is 'R' if the i-th card from the left is red, and 'B' if it is blue.
	// 
	// 
	// Return a int[] containing exactly K elements, where K is the number of characters in colors. The i-th element of the return must be the number written on the i-th card if it can be uniquely determined. Otherwise, the i-th element must be -1. It is guaranteed that there exists at least one sequence that matches colors.
	// 
	// 
	// DEFINITION
	// Class:ColorfulCards
	// Method:theCards
	// Parameters:int, String
	// Returns:int[]
	// Method signature:int[] theCards(int N, String colors)
	// 
	// 
	// NOTES
	// -A positive integer number is called prime if it has exactly two divisors, 1 and itself. By convention, 1 is not considered to be a prime number.
	// 
	// 
	// CONSTRAINTS
	// -N will be between 1 and 1,000, inclusive.
	// -colors will contain between 1 and 50 characters, inclusive.
	// -Each character in colors will be 'R' or 'B'.
	// -There will exist at least one sequence that matches colors.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 5
	// "RRR"
	// 
	// Returns: {2, 3, 5 }
	// 
	// The numbers written on these cards are primes less than or equal to 5, so the only possibility is {2, 3, 5}.
	// 
	// 
	// 1)
	// 7
	// "BBB"
	// 
	// Returns: {1, 4, 6 }
	// 
	// The numbers written on these cards are not primes less than or equal to 7, so the only possibility is {1, 4, 6}.
	// 
	// 
	// 2)
	// 6
	// "RBR"
	// 
	// Returns: {-1, 4, 5 }
	// 
	// There are two possibilities:
	// {2, 4, 5}
	// {3, 4, 5}
	// 
	// 
	// 3)
	// 58
	// "RBRRBRBBRBRRBBRRBBBRRBBBRR"
	// 
	// Returns: {-1, -1, -1, -1, -1, -1, -1, -1, 17, 18, 19, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 53 }
	// 
	// 
	// 
	// 4)
	// 495
	// "RBRRBRBBRBRRBBRRBBBRRBBBRR"
	// 
	// Returns: {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
