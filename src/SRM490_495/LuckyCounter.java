package SRM490_495;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class LuckyCounter
{
	public int countLuckyMoments(String[] moments)
	{
	    
	    int sum = 0;
	    for(String s : moments) {
	        String[] line = s.split(":");
	        String a = line[0];
	        String b = line[1];
	        if (a.equals(b)) {
	            sum++;
	        } else if (a.charAt(0) == a.charAt(1) && 
	                    b.charAt(0) == b.charAt(1)) {
	            sum++; 
	        } else if (a.charAt(0) == b.charAt(1) &&
	                    a.charAt(1) == b.charAt(0)) {
	            sum++; 
	        }
	    }
	    
	    return sum;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		LuckyCounter obj;
		int answer;
		obj = new LuckyCounter();
		long startTime = System.currentTimeMillis();
		answer = obj.countLuckyMoments(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p1);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new String[]{"12:21","11:10"};
		p1 = 1;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new String[]{"00:00","00:59","23:00"};
		p1 = 1;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new String[]{"12:34"};
		p1 = 0;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new String[]{"12:11","22:22","00:01","03:30","15:15","16:00"};
		p1 = 3;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Suppose that we're given a moment of time written as HH:MM, where HH is the hour and MM is the minutes. Let's say that this moment is lucky if it is formatted AB:AB, AA:BB or AB:BA, where both occurrences of A stand for the same digit and both occurrences of B also stand for the same digit. It is allowed for the digits represented by A and B to be the same as well.
	// You are given a String[] moments, where each element represents a single moment of time. Return how many of these time moments are lucky.
	// 
	// 
	// DEFINITION
	// Class:LuckyCounter
	// Method:countLuckyMoments
	// Parameters:String[]
	// Returns:int
	// Method signature:int countLuckyMoments(String[] moments)
	// 
	// 
	// CONSTRAINTS
	// -moments will contain between 1 and 50 elements, inclusive.                                                              
	// -Each element of moments will be formatted "HH:MM" (quotes for clarity), where HH is between 00 and 23, inclusive, and MM is between 00 and 59, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {"12:21", "11:10"}
	// 
	// Returns: 1
	// 
	// 12:21 is lucky, while 11:10 is not.
	// 
	// 1)
	// {"00:00", "00:59", "23:00"}
	// 
	// Returns: 1
	// 
	// Only 00:00 is lucky here (note that it is formatted AB:AB, AA:BB and AB:BA at the same time).
	// 
	// 2)
	// {"12:34"}
	// 
	// Returns: 0
	// 
	// 
	// 
	// 3)
	// {"12:11", "22:22", "00:01", "03:30", "15:15", "16:00"}
	// 
	// Returns: 3
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
