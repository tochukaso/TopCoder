import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class RandomGraph
{
	public double probability(int n, int p)
	{
		if (p == 0) return 0d;

		if (n < 4) {
		    return 0d;
		}

		double eCnt = 0;

		int div = 0;
		for (int i = 0; i < n - 1; i++) {
		    for (int j = i + 1; j < n; j++) {
		        eCnt += (p / 1000d);
		        div++;
		    }
		}
		
		return eCnt / div;
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, double p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		RandomGraph obj;
		double answer;
		obj = new RandomGraph();
		long startTime = System.currentTimeMillis();
		answer = obj.probability(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == answer && Math.abs(p2 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p2));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p2);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int p1;
		double p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 7;
		p1 = 0;
		p2 = 0.0D;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 3;
		p1 = 620;
		p2 = 0.0D;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 4;
		p1 = 500;
		p2 = 0.59375D;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 8;
		p1 = 100;
		p2 = 0.33566851611343496D;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 15;
		p1 = 50;
		p2 = 0.5686761670525845D;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = 50;
		p1 = 10;
		p2 = 0.7494276522159893D;
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 6 -----
		disabled = false;
		p0 = 50;
		p1 = 1000;
		p2 = 1.0D;
		all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Consider a random undirected graph on n vertices.
	// The vertices are numbered 0 through n-1.
	// For each i and j such that 0 <= i < j <= n-1, the graph contains the edge i-j with probability p/1000.
	// The probabilities that different edges are present in the graph are all mutually independent.
	// 
	// 
	// 
	// You are given the ints n and p.
	// Calculate and return the probability that the random graph generated using the above procedure contains at least one connected component with 4 or more vertices.
	// 
	// DEFINITION
	// Class:RandomGraph
	// Method:probability
	// Parameters:int, int
	// Returns:double
	// Method signature:double probability(int n, int p)
	// 
	// 
	// NOTES
	// -Your return value must have an absolute or relative error less than 1e-9.
	// -A connected component is a maximal set S of vertices such that you can get from any vertex in S to any other vertex in S by following a sequence of edges. For example, if a graph with n=5 contains edges 0-2, 2-4, and 1-3, its connected components are {0,2,4} and {1,3}.
	// 
	// 
	// CONSTRAINTS
	// -n will be between 2 and 50, inclusive.
	// -p will be between 0 and 1000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 7
	// 0
	// 
	// Returns: 0.0
	// 
	// The probability of each edge is 0. Therefore, this graph will always have 7 isolated vertices = 7 connected components, each with just a single vertex.
	// 
	// 1)
	// 3
	// 620
	// 
	// Returns: 0.0
	// 
	// This graph only has 3 vertices, so it is impossible to have a connected component with at least 4 vertices.
	// 
	// 2)
	// 4
	// 500
	// 
	// Returns: 0.59375
	// 
	// There are 64 different graphs on 4 labeled vertices.
	// As p=500, each of these 64 graphs is equally likely to be generated by our procedure. 
	// A graph on 4 vertices has a connected component with 4 or more vertices if and only if the entire graph is connected.
	// Out of our 64 possible graphs, 38 are connected.
	// Therefore, the probability we are looking for is 38/64.
	// 
	// 3)
	// 8
	// 100
	// 
	// Returns: 0.33566851611343496
	// 
	// In this case, some of the good graphs have two connected components, each with 4 vertices.
	// 
	// 4)
	// 15
	// 50
	// 
	// Returns: 0.5686761670525845
	// 
	// 
	// 
	// 5)
	// 50
	// 10
	// 
	// Returns: 0.7494276522159893
	// 
	// 
	// 
	// 6)
	// 50
	// 1000
	// 
	// Returns: 1.0
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
