import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class FibonacciDiv2
{

	public int find(int N)
	{
		
		int before = 1;
		int now= 1;
		while (true) {
			if (N == now) return 0;
			if (N < now) {
				return (int) Math.min(Math.abs(N - now), Math.abs(N - before));
			}
			int tmp = now;
			now = tmp + before;
			before = tmp;
		}		
				
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		FibonacciDiv2 obj;
		int answer;
		obj = new FibonacciDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.find(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p1);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 1;
		p1 = 0;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 13;
		p1 = 0;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 15;
		p1 = 2;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 19;
		p1 = 2;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 1000000;
		p1 = 167960;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// The Fibonacci sequence is defined as follows:
	// 
	// F[0] = 0
	// F[1] = 1
	// for each i >= 2: F[i] = F[i-1] + F[i-2]
	// 
	// Thus, the Fibonacci sequence starts as follows: 0, 1, 1, 2, 3, 5, 8, 13, ...
	// The elements of the Fibonacci sequence are called Fibonacci numbers.
	// 
	// You're given an int N.
	// You want to change N into a Fibonacci number.
	// This change will consist of zero or more steps.
	// In each step, you can either increment or decrement the number you currently have.
	// That is, in each step you can change your current number X either to X+1 or to X-1.
	// 
	// Return the smallest number of steps needed to change N into a Fibonacci number.
	// 
	// DEFINITION
	// Class:FibonacciDiv2
	// Method:find
	// Parameters:int
	// Returns:int
	// Method signature:int find(int N)
	// 
	// 
	// CONSTRAINTS
	// -N will be between 1 and 1,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 1
	// 
	// Returns: 0
	// 
	// The number 1 is already a Fibonacci number. No changes are necessary.
	// 
	// 1)
	// 13
	// 
	// Returns: 0
	// 
	// The number 13 is also a Fibonacci number.
	// 
	// 2)
	// 15
	// 
	// Returns: 2
	// 
	// The best way to change 15 into a Fibonacci number is to decrement it twice in a row (15 -> 14 -> 13).
	// 
	// 3)
	// 19
	// 
	// Returns: 2
	// 
	// You can increase it by 2 to get 21.
	// 
	// 4)
	// 1000000
	// 
	// Returns: 167960
	// 
	// This is the biggest possible number that you can get as input.
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
