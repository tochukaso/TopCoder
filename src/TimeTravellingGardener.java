import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TimeTravellingGardener
{
	public int determineUsage(int[] distance, int[] height)
	{
	    int N = height.length;
	
	    int ret = N -1;
	    for (int i = 0; i < N; i++) {
	         for (int j = i + 1; j < N; j++) {
	           int dis = 0; 
	           for (int d = i; d < j; d++) {
	               dis += distance[d];
	           }
	            
//	           double digree = (double) (height[j] - height[i]) / dis ;
	           BigDecimal digreeDecimal = new BigDecimal(height[j] - height[i]).divide(new BigDecimal(dis), MathContext.DECIMAL128);
	           int moveCnt = 0;
	           boolean isFalse = false;
	           for (int k = 0; k < N; k++) {
	               if(i == k || j == k) continue;
	               int rD = 0;
	               if (i < k) {
                       for (int d = i; d < k; d++) {
                           rD += distance[d];
                       }
	               } else { 
                       for (int d = k; d < i; d++) {
                           rD -= distance[d];
                       }
	               } 
                   
	               //double now = height[i] + digree * rD ;
	               double now = digreeDecimal.multiply(new BigDecimal(rD)).doubleValue() + height[i] ;
//	               System.out.println("now " + now + " height " + height[k] + " D " + digree + " rD " + rD + " dH " + digree * rD);
	               if (now + 1e-9 <= height[k]) moveCnt++;
	               if (now - 1e-9 >= height[k] || now < 0) {
	                   isFalse = true;
	                   break ;
	               }
	               
	           }
	           if (!isFalse) {
                ret = Math.min(moveCnt, ret);
	           }
//	           System.out.println(i + " " + j +  " ret is " + ret) ;
	        }
	    }
	    
        return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		TimeTravellingGardener obj;
		int answer;
		obj = new TimeTravellingGardener();
		long startTime = System.currentTimeMillis();
		answer = obj.determineUsage(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p2);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{2,2};
		p1 = new int[]{1,3,10};
		p2 = 1;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{3,3};
		p1 = new int[]{3,1,3};
		p2 = 2;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{1,3};
		p1 = new int[]{4,4,4};
		p2 = 0;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{4,2};
		p1 = new int[]{9,8,5};
		p2 = 1;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{476,465,260,484};
		p1 = new int[]{39,13,8,72,80};
		p2 = 3;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = new int[]{173,36,668,79,26,544};
		p1 = new int[]{488,743,203,446,444,91,453};
		p2 = 5;
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 6 -----
		disabled = false;
		p0 = new int[]{2,4,2,2,4,2,4,2,2,4};
		p1 = new int[]{2,2,10,10,10,16,16,22,22,28,28};
		p2 = 6;
		all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// NOTE: This problem statement contains images that may not display properly if viewed outside of the applet.
	// 
	// 
	// There are N trees arranged in a straight horizontal line. They are numbered 0 through N-1 from left to right. The distance between tree i and tree (i+1) is distance[i], and the initial vertical height of tree i is height[i]. Each tree is assumed to be a perfect vertical segment.
	// 
	// 
	// Your goal is to make the topmost points of all the trees collinear. To do this, you can choose any number of trees and have them travel back to a time when they were shorter. You can decrease the height of each chosen tree to any non-negative value (not necessarily an integer). You will operate on each tree individually, so the trees do not all have to decrease in height by the same amount. The trees that you do not choose will all remain at their original heights.
	// 
	// 
	// Return the minimum number of trees you must send back in time to achieve this goal.
	// 
	// DEFINITION
	// Class:TimeTravellingGardener
	// Method:determineUsage
	// Parameters:int[], int[]
	// Returns:int
	// Method signature:int determineUsage(int[] distance, int[] height)
	// 
	// 
	// NOTES
	// -Two or more points are collinear if they lie on a single straight line.
	// 
	// 
	// CONSTRAINTS
	// -distance will contain between 1 and 49 elements, inclusive.
	// -Each element of distance will be between 1 and 1000, inclusive.
	// -The number of elements in height will be one plus the number of elements in distance.
	// -Each element of height will be between 1 and 1000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {2,2}
	// {1,3,10}
	// 
	// Returns: 1
	// 
	// 
	// 
	// 1)
	// {3,3}
	// {3,1,3}
	// 
	// Returns: 2
	// 
	// 
	// 
	// 2)
	// {1,3}
	// {4,4,4}
	// 
	// Returns: 0
	// 
	// 
	// 
	// 3)
	// {4,2}
	// {9,8,5}
	// 
	// Returns: 1
	// 
	// 
	// 
	// 4)
	// {476,465,260,484}
	// {39,13,8,72,80}
	// 
	// Returns: 3
	// 
	// 
	// 
	// 5)
	// {173,36,668,79,26,544}
	// {488,743,203,446,444,91,453}
	// 
	// Returns: 5
	// 
	// 6)
	// {2,4,2,2,4,2,4,2,2,4}
	// {2,2,10,10,10,16,16,22,22,28,28}
	// 
	// Returns: 6
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
