import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class StonesGame
{
    String D = "Draw" ;
    String R = "Romeo";
    String S = "Strangelet";
    
	public String winner(int N, int M, int K, int L)
	{
		if (K == 1 ) {
		    return D;
		}
	
		int move = Math.abs(L - M);
		if (move < K ) {
		    return R;
		}
		if ((M == 1 && L - M <= K) ||
		        ( M == N && M - L <= K)) {
		    return S;
		}
		return D;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, boolean hasAnswer, String p4) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3);
		System.out.println("]");
		StonesGame obj;
		String answer;
		obj = new StonesGame();
		long startTime = System.currentTimeMillis();
		answer = obj.winner(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer.equals(p4);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + "\"" + p4 + "\"");
			}
			System.out.println("Your answer:");
			System.out.println("\t" + "\"" + answer + "\"");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int p1;
		int p2;
		int p3;
		String p4;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 3;
		p1 = 1;
		p2 = 1;
		p3 = 2;
		p4 = "Draw";
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 5;
		p1 = 1;
		p2 = 2;
		p3 = 2;
		p4 = "Romeo";
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 5;
		p1 = 5;
		p2 = 2;
		p3 = 3;
		p4 = "Strangelet";
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 5;
		p1 = 5;
		p2 = 2;
		p3 = 2;
		p4 = "Draw";
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 1000000;
		p1 = 804588;
		p2 = 705444;
		p3 = 292263;
		p4 = "Romeo";
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = 1000000;
		p1 = 100000;
		p2 = 500000;
		p3 = 600000;
		p4 = "Strangelet";
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Romeo and his friend Strangelet are playing a game. There are N stones in a row, all of which are black except for the M-th one, which is white (all positions in this problem are 1-based). The players alternate turns, and Romeo plays first. On each turn, a player must choose exactly K consecutive stones, one of which must be white, and reverse their order. The winner is the first player who puts the white stone in the L-th position.
	// 
	// Return "Romeo" if Romeo can win regardless of how Strangelet plays, and return "Strangelet" if Strangelet can win regardless of Romeo's strategy.  Otherwise, return "Draw" since neither player can win if both players play optimally.  All quotes are for clarity only.
	// 
	// DEFINITION
	// Class:StonesGame
	// Method:winner
	// Parameters:int, int, int, int
	// Returns:String
	// Method signature:String winner(int N, int M, int K, int L)
	// 
	// 
	// CONSTRAINTS
	// -N will be between 2 and 1,000,000,  inclusive.
	// -M, K and L will each be between 1 and N, inclusive.
	// -M and L will be different.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 3
	// 1
	// 1
	// 2
	// 
	// Returns: "Draw"
	// 
	// There are three stones and the stone in position 1 is white.  To win the game, a player must put the white stone in position 2.  However, since K is 1, each player can only choose a single stone to reverse, so it is impossible to move the white stone from its original position.  Therefore, neither player can win.
	// 
	// 1)
	// 5
	// 1
	// 2
	// 2
	// 
	// Returns: "Romeo"
	// 
	// Romeo can win on his first move by reversing the order of the first two stones.
	// 
	// 2)
	// 5
	// 5
	// 2
	// 3
	// 
	// Returns: "Strangelet"
	// 
	// Romeo's only possible move is to reverse the last two stones.  This puts the white stone in position 4.  Strangelet can then reverse the third and fourth stones, putting the white stone in position 3 and winning the game.
	// 
	// 3)
	// 5
	// 5
	// 2
	// 2
	// 
	// Returns: "Draw"
	// 
	// This is similar to the previous example, but here, the white stone must be moved to position 2.  As in the previous example, Romeo's first move will put the white stone in position 4.  This time, Strangelet will then move it back to position 5 because otherwise, Romeo would move it to position 2 and win.  This sequence of moves will repeat infinitely and neither player will win.
	// 
	// 4)
	// 1000000
	// 804588
	// 705444
	// 292263
	// 
	// Returns: "Romeo"
	// 
	// 5)
	// 1000000
	// 100000
	// 500000
	// 600000
	// 
	// Returns: "Strangelet"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
