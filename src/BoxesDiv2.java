import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class BoxesDiv2
{
	public int findSize(int[] candyCounts)
	{
		List<Integer> list = new ArrayList<Integer>();
		Arrays.sort(candyCounts);
		for (int i = candyCounts.length -1; i >= 0; i--) {
			list.add(candyCounts[i]);
		}
		
		while(list.size() > 1) {
			boolean isUpdate = false;
			boolean[] isIntegrate = new boolean[list.size()];
			for (int i = list.size() - 1; i > 0; i--) {
				if (isIntegrate[i]) continue;
				int now = list.get(i);
				int boxSize = 1;
				for (int j = 1; j < 32; j++) {
					if (now <= boxSize) {
						break;
					}
					boxSize *= 2;
				}
				int rest = boxSize - now;
				for (int j = i - 1; j >= 0; j--) {
					if (rest == 0) break;
					if (isIntegrate[j]) continue;
					int target = list.get(j);
					if (rest >= target) {
						rest -= target;
						now += target;
						list.set(i, now);
						isIntegrate[j] = true;
						isUpdate = true;
					}
				}		
			}
			
			if (!isUpdate) {
				int marge1 = list.get(0);
				int marge2 = list.get(1);
				isIntegrate[0] = true;
				int integrated = marge1 + marge2;
				int boxSize = 1;
				for (int j = 1; j < 32; j++) {
					if (integrated <= boxSize) {
						break;
					}
					boxSize *= 2;
				}
				list.set(1, boxSize);
			}
			
			List<Integer> nextList = new ArrayList<Integer>();			
			for (int i = 0; i < isIntegrate.length; i++) {
				if (!isIntegrate[i]) {
					nextList.add(list.get(i));
				}
			}
			list = nextList;
		}
		return list.get(0);		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		BoxesDiv2 obj;
		int answer;
		obj = new BoxesDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.findSize(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p1);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{8,8};
		p1 = 16;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{5,6};
		p1 = 16;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{1,7};
		p1 = 16;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{1,1,13,1,1};
		p1 = 32;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32};
		p1 = 1024;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Today is Fox Ciel's birthday.
	// You want to give her a box of candies as a present.
	// 
	// You have candies of several different types.
	// You are given a int[] candyCounts.
	// Each element of candyCounts is the number of candies of one particular type.
	// 
	// For each non-negative integer i, you have an unlimited supply of boxes with volume 2^i.
	// That is, you have boxes with volume 1, 2, 4, 8, and so on.
	// 
	// You are going to pack the candies into boxes.
	// Each type of candies has to be packed into a single box, and you have to use different boxes for different types of candy.
	// The volume of a box must be greater than or equal to the number of candies it contains.
	// 
	// Once you have each type of candies in a box, you want to pack those boxes into larger boxes, until only one box remains.
	// You can only pack two boxes at a time.
	// That is, you can take any two boxes you currently have, get a new box, and put the two old boxes into the new box.
	// This is possible if and only if the volume of the new box is greater than or equal to the sum of volumes of the two old boxes.
	// You always get to choose which two boxes you want to pack together, and how large the new box should be.
	// 
	// To summarize:
	// 
	// First, you will pack all the candies into boxes.
	// Then, you will pack all those boxes into larger boxes, until you are left with a single box that contains everything.
	// 
	// 
	// Compute and return the smallest possible volume of the box obtained at the end of packing.
	// 
	// 
	// DEFINITION
	// Class:BoxesDiv2
	// Method:findSize
	// Parameters:int[]
	// Returns:int
	// Method signature:int findSize(int[] candyCounts)
	// 
	// 
	// NOTES
	// -You may assume that the return value always fits into a signed 32-bit integer variable.
	// 
	// 
	// CONSTRAINTS
	// -candyCounts will contain between 1 and 100 elements, inclusive.
	// -Each element of candyCounts will be between 1 and 1000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {8,8}
	// 
	// Returns: 16
	// 
	// First, you pack each type of candies into a box with volume 8. Then, you pack the two boxes into a single box with volume 16.
	// 
	// 1)
	// {5,6}
	// 
	// Returns: 16
	// 
	// Even though you have fewer candies than in Example 0, you still have to use boxes with volume 8 (or more) to store them.
	// 
	// 2)
	// {1,7}
	// 
	// Returns: 16
	// 
	// Now you could pack the 1 candy into a smaller box, but it will not help: you still have to use a box with volume 16 to store the two boxes with candies.
	// 
	// 3)
	// {1,1,13,1,1}
	// 
	// Returns: 32
	// 
	// 
	// 
	// 4)
	// {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32}
	// 
	// Returns: 1024
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
