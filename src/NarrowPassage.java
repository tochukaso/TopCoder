import java.util.Arrays;
import java.util.Comparator;


public class NarrowPassage
{
	public int minDist(int L, int[] a, int[] b)
	{

	    int N = a.length;
	    int[][] a2 = new int[N][];
	    int[][] b2 = new int[N][];

	    for (int i = 0; i < N; i++) {
	        a2[i] = new int[] {a[i], i};
	        b2[i] = new int[] {b[i], i};
	    }
	    
        Arrays.sort(a2, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return a[0] - b[0];
            }
        });

        Arrays.sort(b2, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return a[0] - b[0];
            }
        });

	    
        int sum = 0;
        boolean[] isBool = new boolean[N];
        for (int i = 0; i < N; i++) {
            boolean isB = false;
            for (int j = 0; j < N; j++) {
                if (i == j) continue;
                
                boolean isUnder = a2[j][0] > b2[j][0];
                
                if(a2[i][0] > b2[i][0]) {
                    if (isUnder) continue;
                    
                    if (a2[i][0] > a2[j][0])
                        if( b2[i][0] < b2[j][0]) {
                        isB = true;
                        isBool[i] = true;

                        break;
                    }
                    
                } else {
                    if (!isUnder || isBool[j]) continue;

                    if (a2[i][0] < a2[j][0])
                        if(b2[i][0] > b2[j][0]) {
                        isB = true;
                        isBool[i] = true;

                        break;
                    }
                    
                }
            }

            if(!isB) {
                sum+= Math.abs(a2[i][0] - b2[i][0]);
            } else {
                sum+= (L - a2[i][0]) + (L - b2[i][0]);
            }

            /**
            if(a2[i][1] == b2[i][1]) {
                sum+= Math.abs(a2[i][0] - b2[i][0]);
            } else {
                sum+= (L - a2[i][0]) + (L - b2[i][0]);
            }
            **/
        }

        return sum;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, int[] p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}");
		System.out.println("]");
		NarrowPassage obj;
		int answer;
		obj = new NarrowPassage();
		long startTime = System.currentTimeMillis();
		answer = obj.minDist(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p3);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int[] p1;
		int[] p2;
		int p3;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 5;
		p1 = new int[]{1,2};
		p2 = new int[]{3,4};
		p3 = 4;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 10;
		p1 = new int[]{3,9};
		p2 = new int[]{8,6};
		p3 = 14;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 265467;
		p1 = new int[]{133548,103861,29821,199848,92684,219824,215859,62821,172409,109235,38563,148854,24742,174068,205005,75922,87316,5542,57484,40792,25229,152216,21547,22203,84712,231522,235703,184895,100787,174440,156904,84898,185568,108732,260098,89488,221604,104555,165775,90444,81952,149671,209674,22185,45420,41928,16098,65324,90870,35243};
		p2 = new int[]{150289,135139,69841,227226,177427,230314,199175,81572,220468,151049,40009,145963,115246,252932,263651,38434,120096,69576,29789,115046,33310,260771,5723,80733,107864,142447,235490,242149,124564,134602,245962,7078,215816,219864,190499,210237,212894,142760,126472,201935,119308,120211,235235,19446,87314,17286,61990,102050,261812,257};
		p3 = 7148670;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 1000000;
		p1 = new int[]{706292,756214,490048,228791,567805,353900,640393,562496,217533,934149,938644,127480,777134,999144,41485,544051,417987,767415,971662,959022,670563,34065,518183,750574,546576,207758,159932,429345,670513,271901,476062,392721,774733,502586,915436,120280,951729,699859,581770,268966,79392,888601,378829,350198,939459,644983,605862,721305,269232,137587};
		p2 = new int[]{322468,673534,83223,551733,341310,485064,885415,927526,159402,28144,441619,305530,883149,413745,932694,214862,677401,104356,836580,300580,409942,748444,744205,119051,999286,462508,984346,887773,856655,245559,418763,840266,999775,962927,779570,488394,760591,326325,206948,13999,285467,401562,786209,169847,171326,2901,296531,572035,364920,939046};
		p3 = 45670501;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// There is a narrow passage of length L.
	// We will use a coordinate system where 0 and L are the ends of the passage.
	// 
	// 
	// Inside the passage there are some wolves.
	// You are given two int[]s a and b with the same number of elements.
	// The elements of a are the current coordinates of all wolves.
	// For each wolf, the corresponding element of b is the coordinate where the wolf wants to go.
	// That is, for each valid i, wolf i wants to move from a[i] to b[i].
	// 
	// 
	// The passage is so narrow that wolves cannot pass by each other.
	// In other words, the relative order of the wolves cannot change while they are in the passage.
	// Luckily, there is a lot of empty space on each end of the passage.
	// If some wolves reach the same end of the passage, they can change their order arbitrarily before reentering the passage.
	// 
	// 
	// All wolves must finish at their desired coordinates.
	// Return the minimum total distance the wolves have to travel within the passage in order to reach their final configuration.
	// Note that the distance traveled while they are reordering at the ends of the passage does not count.
	// 
	// DEFINITION
	// Class:NarrowPassage
	// Method:minDist
	// Parameters:int, int[], int[]
	// Returns:int
	// Method signature:int minDist(int L, int[] a, int[] b)
	// 
	// 
	// CONSTRAINTS
	// -L will be between 2 and 1,000,000, inclusive.
	// -a and b will each contain between 1 and 50 elements, inclusive.
	// -a and b will contain the same number of elements.
	// -Each element of a and b will be between 1 and L-1, inclusive.
	// -Elements in a will be pairwise distinct.
	// -Elements in b will be pairwise distinct.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 5
	// {1, 2}
	// {3, 4}
	// 
	// Returns: 4
	// 
	// We have two wolves.
	// One of them wants to go from 1 to 3, the other one from 2 to 4.
	// They can do this without passing each other.
	// (For example, they can both move simultaneously. 
	// Alternately, wolf 1 can move before wolf 0 does.
	// There are no restrictions on the movement of wolves other than they cannot pass each other within the passage.)
	// The total distance traveled in this case is |1-3| + |2-4| = 4.
	// 
	// 1)
	// 10
	// {3, 9}
	// {8, 6}
	// 
	// Returns: 14
	// 
	// One of the optimal ways looks as follows:
	// 
	// Wolf 1 moves from 9 to 10.
	// Wolf 0 moves from 3 to 10.
	// Wolf 1 moves from 10 to 6.
	// Wolf 0 moves from 10 to 8.
	// 
	// 
	// 
	// 2)
	// 265467
	// {133548, 103861, 29821, 199848, 92684, 219824, 215859, 62821, 172409, 109235,
	// 38563, 148854, 24742, 174068, 205005, 75922, 87316, 5542, 57484, 40792,
	// 25229, 152216, 21547, 22203, 84712, 231522, 235703, 184895, 100787, 174440,
	// 156904, 84898, 185568, 108732, 260098, 89488, 221604, 104555, 165775, 90444,
	// 81952, 149671, 209674, 22185, 45420, 41928, 16098, 65324, 90870, 35243}
	// {150289, 135139, 69841, 227226, 177427, 230314, 199175, 81572, 220468, 151049,
	// 40009, 145963, 115246, 252932, 263651, 38434, 120096, 69576, 29789, 115046,
	// 33310, 260771, 5723, 80733, 107864, 142447, 235490, 242149, 124564, 134602,
	// 245962, 7078, 215816, 219864, 190499, 210237, 212894, 142760, 126472, 201935,
	// 119308, 120211, 235235, 19446, 87314, 17286, 61990, 102050, 261812, 257}
	// 
	// Returns: 7148670
	// 
	// 
	// 
	// 3)
	// 1000000
	// {706292, 756214, 490048, 228791, 567805, 353900, 640393, 562496, 217533, 934149,
	// 938644, 127480, 777134, 999144, 41485, 544051, 417987, 767415, 971662, 959022,
	// 670563, 34065, 518183, 750574, 546576, 207758, 159932, 429345, 670513, 271901,
	// 476062, 392721, 774733, 502586, 915436, 120280, 951729, 699859, 581770, 268966,
	// 79392, 888601, 378829, 350198, 939459, 644983, 605862, 721305, 269232, 137587}
	// {322468, 673534, 83223, 551733, 341310, 485064, 885415, 927526, 159402, 28144,
	// 441619, 305530, 883149, 413745, 932694, 214862, 677401, 104356, 836580, 300580,
	// 409942, 748444, 744205, 119051, 999286, 462508, 984346, 887773, 856655, 245559,
	// 418763, 840266, 999775, 962927, 779570, 488394, 760591, 326325, 206948, 13999,
	// 285467, 401562, 786209, 169847, 171326, 2901, 296531, 572035, 364920, 939046}
	// 
	// Returns: 45670501
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
