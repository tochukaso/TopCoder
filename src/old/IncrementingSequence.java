package old;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class IncrementingSequence
{
	public String canItBeDone(int k, int[] A)
	{
	    String OK = "POSSIBLE";
	    String NOT = "IMPOSSIBLE";
	    boolean[] res = new boolean[A.length + 1];
	    
	    for (int j = 0; j < A.length; j++) {
	        int tmp = 0;
	        int i = A[j];
	        while(i + tmp * k <= A.length) {
    	        if (!res[i + tmp * k]) {
    	            res[i + tmp * k] = true;
    	            break;
    	        }
    	        tmp++;
	        }
	    }
	    
	    for (int i = 1; i <= A.length; i++) {
	        if (!res[i]) {
	            return NOT;
	        }
	    }
	    return OK;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		IncrementingSequence obj;
		String answer;
		obj = new IncrementingSequence();
		long startTime = System.currentTimeMillis();
		answer = obj.canItBeDone(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + "\"" + p2 + "\"");
			}
			System.out.println("Your answer:");
			System.out.println("\t" + "\"" + answer + "\"");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int[] p1;
		String p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 3;
		p1 = new int[]{1,2,4,3};
		p2 = "POSSIBLE";
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 5;
		p1 = new int[]{2,2};
		p2 = "IMPOSSIBLE";
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 1;
		p1 = new int[]{1,1,1,1,1,1,1,1};
		p2 = "POSSIBLE";
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 2;
		p1 = new int[]{5,3,3,2,1};
		p2 = "IMPOSSIBLE";
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 9;
		p1 = new int[]{1,2,3,1,4,5,6,7,9,8};
		p2 = "POSSIBLE";
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = 2;
		p1 = new int[]{1,1,1,1,1,1,2,2,2,2,2,2};
		p2 = "POSSIBLE";
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 6 -----
		disabled = false;
		p0 = 1;
		p1 = new int[]{1};
		p2 = "POSSIBLE";
		all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// You have a int[] A with N elements.
	// 
	// Your goal is to change it into a int[] that contains each number from 1 to N exactly once. The change will consist of zero or more steps. In each step, you may pick an arbitrary element of A and increment its value by k. You may pick the same element multiple times. Note that you are not allowed to decrement the value of any element.
	// 
	// You are given the int k and the int[] A.
	// Return "POSSIBLE" if it is possible to achieve your goal. Return "IMPOSSIBLE" otherwise.
	// 
	// DEFINITION
	// Class:IncrementingSequence
	// Method:canItBeDone
	// Parameters:int, int[]
	// Returns:String
	// Method signature:String canItBeDone(int k, int[] A)
	// 
	// 
	// NOTES
	// -Return value is case-sensitive. For example, you can't return "Possible" or "possible" instead of "POSSIBLE".
	// 
	// 
	// CONSTRAINTS
	// -k will be between 1 and 10, inclusive.
	// -A will contain between 1 and 50 elements, inclusive.
	// -Each element of A will be between 1 and 50, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 3
	// {1,2,4,3}
	// 
	// Returns: "POSSIBLE"
	// 
	// This sequence of length 4 already contains all numbers from 1 to 4 exactly once. Note that their order does not matter.
	// 
	// 1)
	// 5
	// {2,2}
	// 
	// Returns: "IMPOSSIBLE"
	// 
	// 
	// 
	// 2)
	// 1
	// {1,1,1,1,1,1,1,1}
	// 
	// Returns: "POSSIBLE"
	// 
	// There are many ways to achieve the goal. For example, it is possible to obtain the sequence {1,2,3,4,5,6,7,8}. To do this, just increment the element at each position one by one until it reaches the required value.
	// 
	// 3)
	// 2
	// {5,3,3,2,1}
	// 
	// Returns: "IMPOSSIBLE"
	// 
	// We want to have the values {1,2,3,4,5}, in any order. Currently, we are missing the 4. As k=2, the only way to produce a 4 is by incrementing a 2. But if we increment our only 2, we will have no way of producing another 2.
	// 
	// 4)
	// 9
	// {1,2,3,1,4,5,6,7,9,8}
	// 
	// Returns: "POSSIBLE"
	// 
	// 
	// 
	// 5)
	// 2
	// {1,1,1,1,1,1,2,2,2,2,2,2}
	// 
	// Returns: "POSSIBLE"
	// 
	// 
	// 
	// 6)
	// 1
	// {1}
	// 
	// Returns: "POSSIBLE"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
