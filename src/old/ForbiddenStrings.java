package old;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ForbiddenStrings
{
	public long countNotForbidden(int n)
	{
	    if (n == 0) return 0;
		if (n == 1) return 3;
		long dp[] = new long[3];
		dp[1] = 3;
		for (int i = 1; i < n; i++) {
			long nDp[] = new long[3];
			nDp[1] = dp[1] + dp[2];
			nDp[2] = dp[1]*2 + dp[2];
			dp = nDp;
		}
				
		return dp[1] + dp[2];
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		ForbiddenStrings obj;
		long answer;
		obj = new ForbiddenStrings();
		long startTime = System.currentTimeMillis();
		answer = obj.countNotForbidden(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p1);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		long p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 2;
		p1 = 9L;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 3;
		p1 = 21L;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 4;
		p1 = 51L;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// A string of letters A, B, C is forbidden if there are three consecutive letters from which one is A, one is B, and one is C. For example, BAACAACCBAAA is forbidden, while AABBCCAABB is not.
	// 
	// Your task is to calculate how many such strings of length n are not forbidden.
	// 
	// 
	// DEFINITION
	// Class:ForbiddenStrings
	// Method:countNotForbidden
	// Parameters:int
	// Returns:long
	// Method signature:long countNotForbidden(int n)
	// 
	// 
	// CONSTRAINTS
	// -n will be between 1 and 30, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 2
	// 
	// Returns: 9
	// 
	// All 9 strings of length 2 are not forbidden.
	// 
	// 
	// 1)
	// 3
	// 
	// Returns: 21
	// 
	// There are 27 strings of length 3. Of these, 6 contain one occurrence of each letter. Those 6 strings are forbidden, so you should return 21.
	// 
	// 
	// 2)
	// 4
	// 
	// Returns: 51
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
