package old;


import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class RedPaint
{
    public double expectedCells(int N)
    {
    	double[][] dp = new double[N + 2][N + 2];
    	dp[0][0] = 1.0d;

		for (int cnt = 0; cnt < N; cnt++) {
		    double[][] nDp = new double[N + 2][N + 2];
			for (int i = 0; i <= N; i++) {
				for (int j = 0; j <= N; j++) {
					int ni = Math.max(i - 1, 0);
					int nj = Math.max(j - 1, 0);
					
					nDp[i + 1][nj] += dp[i][j] * 0.5d;
					nDp[ni][j + 1] += dp[i][j] * 0.5d;
				}
			}
			dp = nDp;
		}

		double res = 0;
		for (int i = 0; i <= N; i++) {
			for (int j = 0; j <= N; j++) {
				System.out.println(i + "," + j + ","+ dp[i][j]);
			    res += dp[i][j] * (i + j + 1);
			}
		}
    	return res;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, double p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		RedPaint obj;
		double answer;
		obj = new RedPaint();
		long startTime = System.currentTimeMillis();
		answer = obj.expectedCells(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == answer && Math.abs(p1 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p1));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p1);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		double p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 0;
		p1 = 1.0D;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 1;
		p1 = 2.0D;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 2;
		p1 = 2.5D;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 4;
		p1 = 3.375D;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// We have an infinite strip of paper divided into a sequence of cells.
	// All of the cells are initially white.
	// We place a robot onto one of the cells.
	// Each time the robot stands on a cell, it paints the cell red.
	// 
	// 
	// 
	// You are given an int N.
	// The robot will now make N steps.
	// In each step, the robot will move either one cell to the left or one cell to the right, with equal probability.
	// All random choices made by the robot are mutually independent.
	// 
	// 
	// 
	// Compute and return the expected number of red cells at the end.
	// 
	// 
	// DEFINITION
	// Class:RedPaint
	// Method:expectedCells
	// Parameters:int
	// Returns:double
	// Method signature:double expectedCells(int N)
	// 
	// 
	// NOTES
	// -Your return value must have an absolute or a relative error at most 10^(-9).
	// 
	// 
	// CONSTRAINTS
	// -N will be between 0 and 500, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 0
	// 
	// Returns: 1.0
	// 
	// No movement. At the end there is a single red cell: the one with the robot.
	// 
	// 1)
	// 1
	// 
	// Returns: 2.0
	// 
	// One step. The robot will choose a random direction and move. There will be exactly two red cells: the one where it started and the one where it ended.
	// 
	// 
	// 2)
	// 2
	// 
	// Returns: 2.5
	// 
	// In the third step the robot will color a third cell red with probability 1/2. Hence, the expected number of red cells is 0.5*2 + 0.5*3 = 2.5.
	// 
	// 
	// 3)
	// 4
	// 
	// Returns: 3.375
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
