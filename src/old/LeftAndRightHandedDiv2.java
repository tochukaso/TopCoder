package old;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class LeftAndRightHandedDiv2
{
	public int count(String S)
	{
	    int sum = 0;
	    int i = 0;
	    for (; i < S.length(); i++) {
	        i = S.indexOf("RL", i);
	        if (i < 0) break;
	        sum++;
	        i++;
	    }
	    return sum;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		LeftAndRightHandedDiv2 obj;
		int answer;
		obj = new LeftAndRightHandedDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p1);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		String p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = "L";
		p1 = 0;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = "RRR";
		p1 = 0;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = "LRLRLR";
		p1 = 2;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = "LLLRRR";
		p1 = 0;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = "RLRLRL";
		p1 = 3;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Some students are seated in a row next to each other.
	// Each of them is either left-handed or right-handed.
	// You are given a String S that describes the row of students.
	// Each character of S is either 'L' or 'R', representing a left-handed or a right-handed person, respectively.
	// The characters describe the row from the left to the right: for all i, the person described by character i+1 sits to the right of the person described by character i.
	// 
	// The students are trying to write down lecture notes.
	// Whenever a left-handed person sits immediately to the right of a right-handed person, their elbows collide when they both try to write at the same time.
	// Compute and return the number of elbow collisions, assuming that all students in the row attempt to write at the same time.
	// 
	// DEFINITION
	// Class:LeftAndRightHandedDiv2
	// Method:count
	// Parameters:String
	// Returns:int
	// Method signature:int count(String S)
	// 
	// 
	// CONSTRAINTS
	// -S will contain between 1 and 50 characters, inclusive.
	// -Each character of S will be either 'L' or 'R'.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "L"
	// 
	// Returns: 0
	// 
	// There's only one person in the row so there are no collisions.
	// 
	// 1)
	// "RRR"
	// 
	// Returns: 0
	// 
	// Everybody is right-handed so there are no collisions.
	// 
	// 2)
	// "LRLRLR"
	// 
	// Returns: 2
	// 
	// There will be two collisions: one of them between the second and the third person from the left (described by S[1] and S[2]) and the other between the fourth and the fifth person.
	// 
	// 3)
	// "LLLRRR"
	// 
	// Returns: 0
	// 
	// 
	// 
	// 4)
	// "RLRLRL"
	// 
	// Returns: 3
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
