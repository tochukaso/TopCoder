package old;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class PowersOfTwo
{
	public long count(long[] powers)
	{
		return 24;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, long[] p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		PowersOfTwo obj;
		long answer;
		obj = new PowersOfTwo();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p1);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		long[] p0;
		long p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new long[]{1L,2L};
		p1 = 4L;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new long[]{1L,1L,1L,1L};
		p1 = 5L;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new long[]{1L,2L,2L,2L,4L,4L,16L};
		p1 = 32L;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new long[]{1L,32L,1L,16L,32L};
		p1 = 18L;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new long[]{1048576L,1073741824L,549755813888L,70368744177664L,4398046511104L,262144L,1048576L,2097152L,8796093022208L,1048576L,1048576L,35184372088832L,2097152L,256L,256L,256L,262144L,1048576L,1048576L,70368744177664L,262144L,1048576L};
		p1 = 18432L;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Fox Ciel likes powers of two.
	// She has a bag with some positive powers of two.
	// Note that some powers may occur multiple times in the bag.
	// You are given a long[] powers.
	// Each element of powers is one of the numbers in Ciel's bag.
	// 
	// Ciel likes each non-negative integer that can be written as the sum of some numbers from her bag.
	// 
	// For example, suppose that her bag contains the numbers 2, 4, 4, and 64.
	// In this case, Ciel likes 10 (because 10=2+4+4), 64 (because 64=64), and also 0 (the sum of no numbers).
	// She does not like 1, and she does not like 12 (note that 12=4+4+4 is not valid, as she only has two 4s; 12=4+4+2+2 is also not valid, as she only has one 2).
	// 
	// Return the number of integers Ciel likes.
	// 
	// DEFINITION
	// Class:PowersOfTwo
	// Method:count
	// Parameters:long[]
	// Returns:long
	// Method signature:long count(long[] powers)
	// 
	// 
	// CONSTRAINTS
	// -powers will contain between 1 and 50 elements, inclusive.
	// -Each element of powers is a power of two between 1 and 2^50, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1,2}
	// 
	// Returns: 4
	// 
	// Fox Ciel likes 0, 1, 2 and 3.
	// 
	// 1)
	// {1,1,1,1}
	// 
	// Returns: 5
	// 
	// Fox Ciel likes 0, 1, 2, 3 and 4.
	// 
	// 2)
	// {1,2,2,2,4,4,16}
	// 
	// Returns: 32
	// 
	// 
	// 
	// 3)
	// {1,32,1,16,32}
	// 
	// Returns: 18
	// 
	// 
	// 
	// 4)
	// {1048576,1073741824,549755813888,70368744177664,4398046511104,262144,1048576,2097152,8796093022208,
	//  1048576,1048576,35184372088832,2097152,256,256,256,262144,1048576,1048576,70368744177664,262144,1048576}
	// 
	// Returns: 18432
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
