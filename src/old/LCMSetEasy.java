package old;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class LCMSetEasy
{
	List<Integer> kList = new ArrayList<Integer>();
	int 
	tar;

	String POSSIBLE = "Possible";
	String IMPOSSIBLE = "Impossible";
		
    public int gcd(int n1, int n2) {
    	return (n1 % n2 == 0) ? n2 : gcd(n2, n1 % n2 );
    }
	public String include(int[] S, int x)
	{
		tar = x;		
		for (int s : S) {
			if (x % s == 0) kList.add(s);
		}
		for (int s : kList) {
			System.out.println(s);
		}
		return judege(0, 0);
	}

	String judege(int n, int x) {
		if (tar == x) {
			return POSSIBLE;
		}

		if (n >= kList.size()) {
			return IMPOSSIBLE;
		}

		String res1 = judege(n + 1, x);
		if (POSSIBLE.equals(res1)) return POSSIBLE;
		int k = kList.get(n);
		int d = gcd(x, k);
		int next = 0;
		if (d == 0) {
			next = Math.max(k, k * x);
		} else {
			next = Math.max(k * x / d, k);
		}
		System.out.println("k=" + k + " " + next + " " + d);
		return judege(n + 1, next);
	}
			
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		LCMSetEasy obj;
		String answer;
		obj = new LCMSetEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.include(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + "\"" + p2 + "\"");
			}
			System.out.println("Your answer:");
			System.out.println("\t" + "\"" + answer + "\"");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int p1;
		String p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{2,3,4,5};
		p1 = 20;
		p2 = "Possible";
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{2,3,4};
		p1 = 611;
		p2 = "Impossible";
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{2,3,4};
		p1 = 12;
		p2 = "Possible";
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{1,2,3,4,5,6,7,8,9,10};
		p1 = 24;
		p2 = "Possible";
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{100,200,300,400,500,600};
		p1 = 2000;
		p2 = "Possible";
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = new int[]{100,200,300,400,500,600};
		p1 = 8000;
		p2 = "Impossible";
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 6 -----
		disabled = false;
		p0 = new int[]{1000000000,999999999,999999998};
		p1 = 999999999;
		p2 = "Possible";
		all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// For any non-empty sequence of positive integers s1, s2, ..., sK their least common multiple is the smallest positive integer that is divisible by each of the given numbers.
	// We will use "lcm" to denote the least common multiple.
	// For example, lcm(3) = 3, lcm(4,6) = 12, and lcm(2,5,7) = 70.
	// 
	// 
	// You are given a int[] S and an int x.
	// Find out whether we can select some elements from S in such a way that their least common multiple will be precisely x.
	// Formally, we are looking for some s1, s2, ..., sK, K >= 1, such that each si belongs to S, and x=lcm(s1, s2, ..., sK).
	// Return "Possible" if such elements of S exist, and "Impossible" if they don't.
	// 
	// DEFINITION
	// Class:LCMSetEasy
	// Method:include
	// Parameters:int[], int
	// Returns:String
	// Method signature:String include(int[] S, int x)
	// 
	// 
	// CONSTRAINTS
	// -S will contain between 1 and 50 elements, inclusive.
	// -Each element in S will be between 1 and 1,000,000,000, inclusive.
	// -Elements in S will be distinct.
	// -x will be between 2 and 1,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {2,3,4,5}
	// 20
	// 
	// Returns: "Possible"
	// 
	// We can obtain 20 in multiple ways. One of them: 20 = lcm(4, 5).
	// 
	// 1)
	// {2,3,4}
	// 611
	// 
	// Returns: "Impossible"
	// 
	// If S={2,3,4}, the only values we can obtain are 2, 3, 4, 6, and 12.
	// 
	// 2)
	// {2,3,4}
	// 12
	// 
	// Returns: "Possible"
	// 
	// 
	// 
	// 3)
	// {1,2,3,4,5,6,7,8,9,10}
	// 24
	// 
	// Returns: "Possible"
	// 
	// 
	// 
	// 4)
	// {100,200,300,400,500,600}
	// 2000
	// 
	// Returns: "Possible"
	// 
	// 
	// 
	// 5)
	// {100,200,300,400,500,600}
	// 8000
	// 
	// Returns: "Impossible"
	// 
	// 
	// 
	// 6)
	// {1000000000,999999999,999999998}
	// 999999999
	// 
	// Returns: "Possible"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
