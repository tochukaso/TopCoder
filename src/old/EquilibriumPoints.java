package old;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class EquilibriumPoints
{
	public double[] getPoints(int[] x, int[] m)
	{
		// F = m1 * m2 / d^2
	    
	    
		double d = 0.4060952084922507;
	    System.out.println("ans : " + (2d / (Math.pow(1 - d, 2))));
        System.out.println("ans : " + (1d / (Math.pow(d, 2))));
	    
	    return new double[0];
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, double[] p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		EquilibriumPoints obj;
		double[] answer;
		obj = new EquilibriumPoints();
		long startTime = System.currentTimeMillis();
		answer = obj.getPoints(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			if (answer.length != p2.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != answer[i] || Math.abs(p2[i] - answer[i]) > 1e-9 * Math.max(1.0, Math.abs(p2[i]))) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.print("\t" + "{");
				for (int i = 0; p2.length > i; ++i) {
					if (i > 0) {
						System.out.print(",");
					}
					System.out.print(p2[i]);
				}
				System.out.println("}");
			}
			System.out.println("Your answer:");
			System.out.print("\t" + "{");
			for (int i = 0; answer.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(answer[i]);
			}
			System.out.println("}");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int[] p1;
		double[] p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{1,2};
		p1 = new int[]{1,1};
		p2 = new double[]{1.5D};
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{1,2};
		p1 = new int[]{1,1000};
		p2 = new double[]{1.0306534300317156D};
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{1,2,3};
		p1 = new int[]{1,2,1};
		p2 = new double[]{1.4060952084922507D,2.5939047915077493D};
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{2,3,5,7};
		p1 = new int[]{3,2,7,5};
		p2 = new double[]{2.532859446114924D,3.7271944335152813D,6.099953640852538D};
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// There are N points situated on a straight line. The i-th point is located at coordinate x[i] and has a mass of m[i]. The locat?on of each point is strongly fixed and cannot be changed by any forces. Coordinates of all points are distinct.
	// When another point P is added on the line and its position is not fixed, the point falls under the impact of gravitational forces from each of the given N points.  Points located to the left of P force it to the left, and points located to the right of P force it to the right.  When two points are located a distance of d apart and have masses m1 and m2, the value of gravitational force between them is F = G * m1 * m2 / d^2, where G is some positive constant.
	// Point P is said to be an equilibrium point if the vector sum of gravitational forces from all points on P equals zero.  In other words, the sum of the values of gravitational forces between P and all the points located to the left of P must be the same as the sum of the values of gravitational forces between P and all the points located to the right of P.
	// It is known that there always exist exactly N-1 equilibrium points. Return a double[] containing their coordinates sorted in ascending order.
	// 
	// DEFINITION
	// Class:EquilibriumPoints
	// Method:getPoints
	// Parameters:int[], int[]
	// Returns:double[]
	// Method signature:double[] getPoints(int[] x, int[] m)
	// 
	// 
	// NOTES
	// -Each element of your return value must have an absolute or relative error less than 1e-9.
	// -You don't need to know the mass of point P and the value of constant G to solve the problem.
	// 
	// 
	// CONSTRAINTS
	// -x will contain between 2 and 50 elements, inclusive.
	// -m will contain the same number of elements as x.
	// -Each element of x will be between 1 and 1000, inclusive.
	// -Each element of m will be between 1 and 1000, inclusive.
	// -x will be sorted in strictly ascending order.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1, 2}
	// {1, 1}
	// 
	// Returns: {1.5 }
	// 
	// When two points have the same mass, the equilibrium point is located exactly halfway between them.
	// 
	// 1)
	// {1, 2}
	// {1, 1000}
	// 
	// Returns: {1.0306534300317156 }
	// 
	// When two points have distinct masses, the equlibrium point is located closer to the point with lesser mass.
	// 
	// 2)
	// {1, 2, 3}
	// {1, 2, 1}
	// 
	// Returns: {1.4060952084922507, 2.5939047915077493 }
	// 
	// There are two equilibrium points located symmetrically with respect to the middle point of the input points.
	// 
	// 3)
	// {2, 3, 5, 7}
	// {3, 2, 7, 5}
	// 
	// Returns: {2.532859446114924, 3.7271944335152813, 6.099953640852538 }
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
