package old;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class SumAndProductPuzzle
{
	public long getSum(int A, int B)
	{
return 0;	
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, long p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		SumAndProductPuzzle obj;
		long answer;
		obj = new SumAndProductPuzzle();
		long startTime = System.currentTimeMillis();
		answer = obj.getSum(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.println("\t" + p2);
			}
			System.out.println("Your answer:");
			System.out.println("\t" + answer);
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int p1;
		long p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 30;
		p1 = 33;
		p2 = 33L;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 8;
		p1 = 11;
		p2 = 19L;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 40;
		p1 = 43;
		p2 = 0L;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 47;
		p1 = 74;
		p2 = 168L;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 1;
		p1 = 2;
		p2 = 0L;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// Consider the following story.
	// 
	// 
	// 
	// STORY STARTS HERE.
	// 
	// 
	// 
	// There were three mathematicians: Susan, Priscilla, and Bob.
	// Bob picked two positive integers x and y such that x <= y.
	// He then told their sum to Susan and their product to Priscilla.
	// Susan and Priscilla both knew all the facts listed above.
	// Then, Susan and Priscilla made the following statements:
	// 
	// Susan: "I am certain that you cannot determine my number."
	// Priscilla: "Thanks for telling me that. Now I'm sure that your number is S."
	// 
	// 
	// 
	// 
	// STORY ENDS HERE.
	// 
	// 
	// 
	// My friends Baska and Olivia are fond of puzzles.
	// Recently, Baska told Olivia the above story.
	// When telling the story, Baska used some specific positive integer (for example, 9) instead of S.
	// Then, she asked Olivia to determine x and y.
	// Olivia easily came up with the unique solution.
	// 
	// 
	// 
	// Of course, you don't know the integer Baska used instead of S.
	// Instead, you are given two ints A and B.
	// Find all S between A and B, inclusive, such that the above discussion between Baska and Olivia could have happened.
	// Return the sum of all such S.
	// 
	// 
	// DEFINITION
	// Class:SumAndProductPuzzle
	// Method:getSum
	// Parameters:int, int
	// Returns:long
	// Method signature:long getSum(int A, int B)
	// 
	// 
	// NOTES
	// -Watch out for overflow. The return value may overflow a 32-bit integer variable.
	// 
	// 
	// CONSTRAINTS
	// -A will be between 1 and 5,000,000, inclusive.
	// -B will be between A and 5,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 30
	// 33
	// 
	// Returns: 33
	// 
	// The only valid S in this range is 33.
	// The unique pair (x,y) that corresponds to S=33 is (1,32).
	// 
	// 1)
	// 8
	// 11
	// 
	// Returns: 19
	// 
	// 
	// 
	// 2)
	// 40
	// 43
	// 
	// Returns: 0
	// 
	// Sometimes the given range doesn't contain any valid S. In such case the correct return value is 0.
	// 
	// 3)
	// 47
	// 74
	// 
	// Returns: 168
	// 
	// 
	// 
	// 4)
	// 1
	// 2
	// 
	// Returns: 0
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
