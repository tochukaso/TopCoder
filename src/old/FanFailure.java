package old;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class FanFailure
{
	public int[] getRange(int[] capacities, int minCooling)
	{
	    Arrays.sort(capacities);
	    
	    int sum = 0;
	    
	    int min = -1;
	    for (int i = capacities.length - 1; i >= 0; i--) {
	        sum += capacities[i];
	        if (sum >= minCooling) {
	            min = i;
	            break;
	        }
	    }

	    int max = 0;
	    sum = 0;
        for (int i = 0; i < capacities.length; i++) {
            sum += capacities[i];
            if (sum >= minCooling) {
                max = capacities.length - i - 1;
                break;
            }
        }

        int[] res = new int[2];
        res[0] = min;
        res[1] = max;
	    
        return res;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, int[] p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		FanFailure obj;
		int[] answer;
		obj = new FanFailure();
		long startTime = System.currentTimeMillis();
		answer = obj.getRange(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			if (answer.length != p2.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p2[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
			if (hasAnswer) {
				System.out.println("Desired answer:");
				System.out.print("\t" + "{");
				for (int i = 0; p2.length > i; ++i) {
					if (i > 0) {
						System.out.print(",");
					}
					System.out.print(p2[i]);
				}
				System.out.println("}");
			}
			System.out.println("Your answer:");
			System.out.print("\t" + "{");
			for (int i = 0; answer.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(answer[i]);
			}
			System.out.println("}");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int p1;
		int[] p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{1,2,3};
		p1 = 2;
		p2 = new int[]{2,1};
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{8,5,6,7};
		p1 = 22;
		p2 = new int[]{0,0};
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{676,11,223,413,823,122,547,187,28};
		p1 = 1000;
		p2 = new int[]{7,2};
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{955,96,161,259,642,242,772,369,311,785,92,991,620,394,128,774,973,94,681,771,916,373,523,100,220,993,472,798,132,361,33,362,573,624,722,520,451,231,37,921,408,170,303,559,866,412,339,757,822,192};
		p1 = 3619;
		p2 = new int[]{46,30};
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// In a robust computer system, one of the most important pieces is the cooling.  Without proper cooling, processors can heat up to over 400 degrees C.  The reliability of a system can be measured by determining how many fans can fail without risking the system processor.  Each fan can be assigned a value indicating how much capacity it has to cool the system, and we can define a minimum cooling capacity, which the sum of the fan capacities must exceed or equal to properly cool the system.  We define a Failure Set as a set of fans which are not necessary to cool the system.  In other words, if the fans in a Failure Set break, the system can still be properly cooled by the remaining fans.  The count of a Failure Set is the number of fans in the set.
	// 
	// 
	// 
	// To measure the reliability, we will define two values, the Maximum Failure Set (MFS) and the Maximum Failure Count (MFC).  A MFS is a Failure Set of fans with the largest count possible.  A set of fans may have more than one MFS (see below).  A Failure Set is an MFS if and only if there are no Failure Sets with a higher count.  The MFC is the largest value such that all fan sets with count <= MFC are Failure Sets.  In other words, any set of fans of size MFC or less can fail, and the system will still be properly cooled by the remaining fans.
	// 
	// 
	// 
	// Consider the fan set with capacities 1, 2, 3, and a cooling requirement of 2.  Two MFSs with a count of 2 exist: fans 1 and 3, or fans 1 and 2.  However, the MFC is not 2 because fans 2 and 3 is not a Failure set (fan 1 could not cool the system properly by itself).  Thus, the MFC is 1, because if any single fan fails, the system can still be cooled.
	// 
	// 
	// 
	// You will be given a int[] capacities, which designates how many units of cooling each fan provides, and an int minCooling, which designates the minimum units of cooling required to cool the system.  Your method should return a int[], where the first value should be the number of fans in the Maximum Failure Set (MFS), and the second value should be the Maximum Failure Count (MFC).
	// 
	// 
	// DEFINITION
	// Class:FanFailure
	// Method:getRange
	// Parameters:int[], int
	// Returns:int[]
	// Method signature:int[] getRange(int[] capacities, int minCooling)
	// 
	// 
	// CONSTRAINTS
	// -capacities has between 1 and 50 elements, inclusive.
	// -each element of capacities is between 1 and 1000, inclusive.
	// -minCooling is between 1 and 49999, inclusive.
	// -The sum of all elements in capacities will be greater than minCooling.
	// -Due to a contradiction in the original problem statement, it was not clear whether having enough fans to equal exactly minCooling was enough to cool the system.  For this reason, test cases where this anomaly changes the answer will be rejected.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1,2,3}
	// 2
	// 
	// Returns: { 2,  1 }
	// 
	// Example from the problem statement.
	// 
	// 1)
	// {8,5,6,7}
	// 22
	// 
	// Returns: { 0,  0 }
	// 
	// No fans can fail in this system.
	// 
	// 2)
	// {676, 11, 223, 413, 823, 122, 547, 187, 28}
	// 1000
	// 
	// Returns: { 7,  2 }
	// 
	// If you eliminate fans with 676, 11, 413, 122, 547, 187, and 28, you are left with 223 + 823 = 1046 units of cooling, which is sufficient, yielding an MFS size of 7.  If you eliminate 676, 823, and 547, you are left with only 984 units of cooling.  All combinations of 2 or less fans breaking leaves sufficient cooling, so the MFC is 2.
	// 
	// 3)
	// {955, 96, 161, 259, 642, 242, 772, 369, 311, 785,
	//  92, 991, 620, 394, 128, 774, 973, 94, 681, 771,
	//  916, 373, 523, 100, 220, 993, 472, 798, 132, 361,
	//  33, 362, 573, 624, 722, 520, 451, 231, 37, 921,
	//  408, 170, 303, 559, 866, 412, 339, 757, 822, 192}
	// 3619
	// 
	// Returns: { 46,  30 }
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
